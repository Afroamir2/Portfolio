new_df$status[i] <- "has negative"
} else if (missing == 0){
if(row[["a"]]^2 + row[["b"]]^2!= row[["c"]]^2){
new_df$status[i] <- "incorrect math"
} else{
new_df$status[i] <- "okay"
}
} else{
if (is.na(row[["a"]])) {
new_df$a[i] <- sqrt(row[["c"]]^2 - row[["b"]]^2)
new_df$status[i] <- "okay"
} else if (is.na(row[["b"]])) {
new_df$b[i] <- sqrt(row[["c"]]^2 - row[["a"]]^2)
new_df$status[i] <- "okay"
} else if (is.na(row[["c"]])) {
new_df$c[i] <- sqrt(row[["a"]]^2 + row[["b"]]^2)
new_df$status[i] <- "okay"
}
}
}
return(new_df)
}
prob4df
pythagoreans_revenge(prob4df)
pythagoreans_revenge <- function(df){
new_df <- data.frame(a = df$a, b = df$b, c = df$c, status = NA)
for (i in 1:nrow(df)){
row <- df[i,]
missing <- sum(is.na(row))
if (missing == 2){
new_df$status[i] <- "too many missing"
} else if (any(c(row[["a"]], row[["b"]], row[["c"]]) < 0, na.rm = TRUE)){
new_df$status[i] <- "has negative"
} else if (missing == 0){
if(row[["a"]]^2 + row[["b"]]^2!= row[["c"]]^2){
new_df$status[i] <- "incorrect math"
} else{
new_df$status[i] <- "okay"
}
} else{
if (is.na(row[["a"]])) {
new_df$a[i] <- sqrt(row[["c"]]^2 - row[["b"]]^2)
new_df$status[i] <- "okay"
} else if (is.na(row[["b"]])) {
new_df$b[i] <- sqrt(row[["c"]]^2 - row[["a"]]^2)
new_df$status[i] <- "okay"
} else if (is.na(row[["c"]])) {
new_df$c[i] <- sqrt(row[["a"]]^2 + row[["b"]]^2)
new_df$status[i] <- "okay"
}
}
}
return(table(new_df))
}
pythagoreans_revenge(prob4df)
? rect()
? lines()
? rect()
rect(2, 3, 2, 3)
plot.new()
rect(2, 3, 2, 3)
? lines()
rect(2, 3, 2, 3)
? rect()
f <- function(x) {
2 * exp(-2 * x)
}
exact_value <- -exp(-2 * 1) - (-exp(-2 * 0))
reinmanSum <- function(f, a, b, n, exact = exact_value, make_plot = FALSE){
width <- 0.5 * ((b-a)/n)
sumNum <- 0
exact_value <- -exp(-2 * 1) - (-exp(-2 * 0))
for (i in 1:n){
midpoint <- a + (i - 0.5) * width
sumNum <- sumNum + f(midpoint) * width
}
if (make_plot){
x_points <- seq(a, b, length.out = 100)
y_points <- f(x_points)
plot(x_points, y_points, type = "l", main = "Midpoint Riemann Sum Approximation",
xlab = "x", ylab = "f(x)")
for (i in 1:n) {
# Calculate the midpoint
midpoint <- a + (i - 0.5) * width
# Draw the rectangle
rect(a + (i - 1) * width, 0, a + i * width, f(midpoint), border = "red")
}
}
return(list( "Approximated Sum" = sumNum,
"Exact Value" = exact,
"Error Value" = exact - sumNum))
}
reinmanSum(f, 0, 1,)
reinmanSum(f, 0, 1, 3)
reinmanSum(f, 0, 1, 3, make_plot = TRUE)
reinmanSum(f, 0, 1, 30, make_plot = TRUE)
reinmanSum(f, 0, 1, 100000, make_plot = TRUE)
reinmanSum(f, 0, 1, 100, make_plot = TRUE)
f <- function(x) {
2 * exp(-2 * x)
}
exact_value <- -exp(-2 * 1) - (-exp(-2 * 0))
reinmanSum <- function(f, a, b, n, exact = exact_value, make_plot = FALSE){
start_time <- Sys.time()
width <- 0.5 * ((b-a)/n)
sumNum <- 0
exact_value <- -exp(-2 * 1) - (-exp(-2 * 0))
for (i in 1:n){
midpoint <- a + (i - 0.5) * width
sumNum <- sumNum + f(midpoint) * width
}
if (make_plot){
x_points <- seq(a, b, length.out = 100)
y_points <- f(x_points)
plot(x_points, y_points, type = "l", main = "Midpoint Riemann Sum Approximation",
xlab = "x", ylab = "f(x)")
for (i in 1:n) {
# Calculate the midpoint
midpoint <- a + (i - 0.5) * width
# Draw the rectangle
rect(a + (i - 1) * width, 0, a + i * width, f(midpoint), border = "red")
}
}
return(list( "Approximated Sum" = sumNum,
"Exact Value" = exact,
"Error Value" = exact - sumNum,
"Run-time" = start_time - Sys.time()))
}
reinmanSum(f, 0, 1, 100, make_plot = TRUE)
f <- function(x) {
2 * exp(-2 * x)
}
exact_value <- -exp(-2 * 1) - (-exp(-2 * 0))
reinmanSum <- function(f, a, b, n, exact = exact_value, make_plot = FALSE){
start_time <- Sys.time()
width <- 0.5 * ((b-a)/n)
sumNum <- 0
exact_value <- -exp(-2 * 1) - (-exp(-2 * 0))
for (i in 1:n){
midpoint <- a + (i - 0.5) * width
sumNum <- sumNum + f(midpoint) * width
}
if (make_plot){
x_points <- seq(a, b, length.out = 100)
y_points <- f(x_points)
plot(x_points, y_points, type = "l", main = "Midpoint Riemann Sum Approximation",
xlab = "x", ylab = "f(x)")
for (i in 1:n) {
# Calculate the midpoint
midpoint <- a + (i - 0.5) * width
# Draw the rectangle
rect(a + (i - 1) * width, 0, a + i * width, f(midpoint), border = "red")
}
}
return(list( "Approximated Sum" = sumNum,
"Exact Value" = exact,
"Error Value" = exact - sumNum,
"Run-time" =  Sys.time()- start_time))
}
reinmanSum(f, 0, 1, 100, make_plot = TRUE)
? rect
reinmanSum(f,0,1,250, make_plot = T)
f <- function(x) {
2 * exp(-2 * x)
}
exact_value <- -exp(-2 * 1) - (-exp(-2 * 0))
reinmanSum <- function(f, a, b, n, exact = exact_value, make_plot = FALSE){
start_time <- Sys.time()
width <- 0.5 * ((b-a)/n)
sumNum <- 0
exact_value <- -exp(-2 * 1) - (-exp(-2 * 0))
for (i in 1:n){
midpoint <- a + (i - 0.5) * width
sumNum += f(midpoint) * width
f <- function(x) {
2 * exp(-2 * x)
}
exact_value <- -exp(-2 * 1) - (-exp(-2 * 0))
reinmanSum <- function(f, a, b, n, exact = exact_value, make_plot = FALSE){
start_time <- Sys.time()
width <- 0.5 * ((b-a)/n)
sumNum <- 0
exact_value <- -exp(-2 * 1) - (-exp(-2 * 0))
for (i in 1:n){
midpoint <- a + (i - 0.5) * width
sumNum <- sumNum + f(midpoint) * width
}
if (make_plot){
x_points <- seq(a, b, length.out = 100)
y_points <- f(x_points)
plot(x_points, y_points, type = "l", main = "Midpoint Riemann Sum Approximation",
xlab = "x", ylab = "f(x)")
for (i in 1:n) {
midpoint <- a + (i - 0.5) * width
rect(a + (i - 1) * width, 0, a + i * width, f(midpoint), border = "red")
}
}
return(list( "Approximated Sum" = sumNum,
"Exact Value" = exact,
"Error Value" = exact - sumNum,
"Run-time" =  Sys.time()- start_time))
}
reinmanSum(f,0,1,250, make_plot = T)
f <- function(x) {
2 * exp(-2 * x)
}
exact_value <- -exp(-2 * 1) - (-exp(-2 * 0))
reinmanSum <- function(f, a, b, n, exact = exact_value, make_plot = FALSE){
start_time <- Sys.time()
width <- ((b-a)/n)
sumNum <- 0
exact_value <- -exp(-2 * 1) - (-exp(-2 * 0))
for (i in 1:n){
midpoint <- a + (i - 0.5) * width
sumNum <- sumNum + f(midpoint) * width
}
if (make_plot){
x_points <- seq(a, b, length.out = 100)
y_points <- f(x_points)
plot(x_points, y_points, type = "l", main = "Midpoint Riemann Sum Approximation",
xlab = "x", ylab = "f(x)")
for (i in 1:n) {
midpoint <- a + (i - 0.5) * width
rect(a + (i - 1) * width, 0, a + i * width, f(midpoint), border = "red")
}
}
return(list( "Approximated Sum" = sumNum,
"Exact Value" = exact,
"Error Value" = exact - sumNum,
"Run-time" =  Sys.time()- start_time))
}
reinmanSum(f,0,1,250, make_plot = T)
reinmanSum(f,0,1,500, make_plot = T)
n <- c( seq(10, 90, by = 10), seq(100, 1000, by = 100))
reinmanSum(f,0,1,n, make_plot = T)
n
? rbind
n <- c( seq(10, 90, by = 10), seq(100, 1000, by = 100))
results <- data.frame(
n = integer(),
Approximated_Sum = numeric(),
Exact_Value = numeric(),
Error_Value = numeric(),
Run_time = numeric()
)
a <- 0
b <- 1
for (i in n){
result <- reinmanSum(f, a, b, n)
results <- rbind(results, data.frame(n=n, Approximated_Sum = result$`Approximated Sum`,
Exact_Value = result$`Exact Value`,
Error_Value = result$`Error Value`, Run_time = as.numeric(result$`Run-time`, units = "secs")))
}
n <- c( seq(10, 90, by = 10), seq(100, 1000, by = 100))
results <- data.frame(
n = integer(),
Approximated_Sum = numeric(),
Exact_Value = numeric(),
Error_Value = numeric(),
Run_time = numeric()
)
a <- 0
b <- 1
for (i in n){
result <- reinmanSum(f, a, b, i)
results <- rbind(results, data.frame(n=n, Approximated_Sum = result$`Approximated Sum`,
Exact_Value = result$`Exact Value`,
Error_Value = result$`Error Value`, Run_time = as.numeric(result$`Run-time`, units = "secs")))
}
results
n <- c( seq(10, 90, by = 10), seq(100, 1000, by = 100))
results <- data.frame(
n = integer(),
Approximated_Sum = numeric(),
Exact_Value = numeric(),
Error_Value = numeric(),
Run_time = numeric()
)
a <- 0
b <- 1
for (i in n){
result <- reinmanSum(f, a, b, i)
results <- rbind(results, data.frame(n=n, Approximated_Sum = result$`Approximated Sum`,
Exact_Value = result$`Exact Value`,
Error_Value = result$`Error Value`, Run_time = as.numeric(result$`Run-time`, units = "secs")))
}
print(results)
plot(results$Approximated_Sum ~ results$n)
plot(results$n ~ results$Approximated_Sum)
plot(results$n, results$Approximated_Sum, type = "b", col = "blue",
main = "Estimate of the Probability vs. n",
xlab = "Number of Segments (n)", ylab = "Approximated Sum",
pch = 19)  # pch = 19 gives filled circles
plot(results$n, results$Approximated_Sum, type = "b", col = "blue",
main = "Estimate of the Probability vs. n",
xlab = "Number of Segments (n)", ylab = "Approximated Sum",
ylim = c(0, 1)
pch = 19)  # pch = 19 gives filled circles
plot(results$n, results$Approximated_Sum, type = "b", col = "blue",
main = "Estimate of the Probability vs. n",
xlab = "Number of Segments (n)", ylab = "Approximated Sum",
ylim = c(0, 1),
pch = 19)  # pch = 19 gives filled circles
plot(results$n, results$Approximated_Sum, type = "b", col = "blue",
main = "Estimate of the Probability vs. n",
xlab = "Number of Segments (n)", ylab = "Approximated Sum",
ylim = c(0.6, 1),
pch = 19)  # pch = 19 gives filled circles
plot(results$n, results$Approximated_Sum, type = "b", col = "blue",
main = "Estimate of the Probability vs. n",
xlab = "Number of Segments (n)", ylab = "Approximated Sum",
ylim = c(0.8, 1),
pch = 19)  # pch = 19 gives filled circles
reinmanSum(f, a, b, 10)
reinmanSum(f, a, b, 2)
plot(results$n, results$Approximated_Sum, type = "b", col = "blue",
main = "Estimate of the Probability vs. n",
xlab = "Number of Segments (n)", ylab = "Approximated Sum",
ylim = c(0.81, 1),
pch = 19)  # pch = 19 gives filled circles
plot(results$n, results$Approximated_Sum, type = "b", col = "blue",
main = "Estimate of the Probability vs. n",
xlab = "Number of Segments (n)", ylab = "Approximated Sum",
ylim = c(0.81, 0.87),
pch = 19)  # pch = 19 gives filled circles
plot(results$n, results$Approximated_Sum,
main = "Estimate of the Probability vs. n",
xlab = "Number of Segments (n)", ylab = "Approximated Sum",
ylim = c(0.81, 0.87),
pch = 19)  # pch = 19 gives filled circles
? abline()
plot(results$n, results$Approximated_Sum,
main = "Estimate of the Probability vs. n",
xlab = "Number of Segments (n)", ylab = "Approximated Sum",
ylim = c(0.81, 0.87))  # pch = 19 gives filled circles
head(results)
plot(results$n, results$Approximated_Sum,
main = "Estimate of the Probability vs. n",
xlab = "Number of Segments (n)", ylab = "Approximated Sum",
ylim = c(0.81, 0.87))  # pch = 19 gives filled circles
for (i in n){
abline(a)
}
plot(results$n, results$Approximated_Sum,
main = "Estimate of the Probability vs. n",
xlab = "Number of Segments (n)", ylab = "Approximated Sum",
ylim = c(0.81, 0.87))
for (i in n){
abline(a)
}
for (i in n){
abline(a)
}
plot(results$n, results$Approximated_Sum,
main = "Estimate of the Probability vs. n",
xlab = "Number of Segments (n)", ylab = "Approximated Sum",
ylim = c(0.81, 0.87))
abline(h = exact_value, col = "red", lty = 2)
plot(results$n, results$Approximated_Sum,
main = "Estimate of the Probability vs. n",
xlab = "Number of Segments (n)", ylab = "Approximated Sum",
ylim = c(0.81, 0.87))
abline(h = exact_value, col = "red", lty = 1)
library(mtcars)
data(mtc\)
data("mtcars")
head(mtcars)
? sample()
sample(nrow(mtcars))
? ceiling
5 // 4
5 / 4
ceiling(5/4)
? rep()
k.fold.partition <- function(df, k){
n <- nrows(df)
shuffle_df <- df[sample(nrow(df)),]
rowsPerPart <- ceiling(n/k)
partition <- rep(1:k, each = rowsPerPart)[1:n]
}
rep(1:k, each = rowsPerPart)
k = 4
rep(1:k, each = rowsPerPart)
rowsPerPart = 4
rowsPerPart = 12
rep(1:k, each = rowsPerPart)
rep(1:k, each = rowsPerPart)[1:12]
k.fold.partition <- function(df, k){
n <- nrows(df)
shuffle_df <- df[sample(nrow(df)),]
rowsPerPart <- ceiling(n/k)
partition <- rep(1:k, each = rowsPerPart)[1:n]
df$partition <- partitions
return(df)
}
k.fold.partition(mtcars, 4)
k.fold.partition <- function(df, k){
n <- nrows(df)
shuffle_df <- df[sample(nrow(df)),]
rowsPerPart <- ceiling(n/k)
partition <- rep(1:k, each = rowsPerPart)[1:n]
df$partition <- partitions
split_dfs <- split(partitioned, df$partition)
return(df)
}
k.fold.partition(mtcars, 4)
k.fold.partition <- function(df, k){
n <- nrow(df)
shuffle_df <- df[sample(nrow(df)),]
rowsPerPart <- ceiling(n/k)
partition <- rep(1:k, each = rowsPerPart)[1:n]
df$partition <- partitions
split_dfs <- split(partitioned, df$partition)
return(df)
}
k.fold.partition(mtcars, 4)
k.fold.partition <- function(df, k){
n <- nrow(df)
shuffle_df <- df[sample(nrow(df)),]
rowsPerPart <- ceiling(n/k)
partition <- rep(1:k, each = rowsPerPart)[1:n]
df$partition <- partition
split_dfs <- split(partition, df$partition)
return(df)
}
k.fold.partition(mtcars, 4)
k.fold.partition <- function(df, k){
n <- nrow(df)
shuffle_df <- df[sample(nrow(df)),]
rowsPerPart <- ceiling(n/k)
partition <- rep(1:k, each = rowsPerPart)[1:n]
df$partition <- partition
split_dfs <- split(partition, df$partition)
return(split_dfs)
}
k.fold.partition(mtcars, 4)
k.fold.partition <- function(df, k){
n <- nrow(df)
shuffle_df <- df[sample(nrow(df)), ]
rowsPerPart <- ceiling(n / k)
partition <- rep(1:k, each = rowsPerPart)[1:n]
shuffle_df$partition <- partition
split_dfs <- split(shuffle_df, shuffle_df$partition)
return(split_dfs)
}
k.fold.partition(mtcars, 4)
k.fold.partition <- function(df, k){
n <- nrow(df)
shuffle_df <- df[sample(nrow(df)), ]
rowsPerPart <- ceiling(n / k)
partition <- rep(1:k, each = rowsPerPart)[1:n]
shuffle_df$partition <- partition
split_dfs <- split(shuffle_df, shuffle_df$partition)
return(split_dfs)
}
k.fold.partition(mtcars, 4)
sample(nrow(mtcars))
pythagoreans_revenge <- function(df){
new_df <- data.frame(a = df$a, b = df$b, c = df$c, status = NA)
for (i in 1:nrow(df)){
row <- df[i,]
missing <- sum(is.na(row))
if (missing == 2){
new_df$status[i] <- "too many missing"
} else if (any(c(row[["a"]], row[["b"]], row[["c"]]) < 0, na.rm = TRUE)){
new_df$status[i] <- "has negative"
} else if (missing == 0){
if(row[["a"]]^2 + row[["b"]]^2!= row[["c"]]^2){
new_df$status[i] <- "incorrect math"
} else{
new_df$status[i] <- "okay"
}
} else{
if (is.na(row[["a"]])) {
new_df$a[i] <- sqrt(row[["c"]]^2 - row[["b"]]^2)
new_df$status[i] <- "okay"
} else if (is.na(row[["b"]])) {
new_df$b[i] <- sqrt(row[["c"]]^2 - row[["a"]]^2)
new_df$status[i] <- "okay"
} else if (is.na(row[["c"]])) {
new_df$c[i] <- sqrt(row[["a"]]^2 + row[["b"]]^2)
new_df$status[i] <- "okay"
}
}
}
return(new_df)
}
pythagoreans_revenge(prob4df)
load("~/.RData")
library(MASS)
rm(list=ls())
install.packages("MASS")
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
use_python("~/opt/anaconda3/bin/python")
setwd("~/repos/Portfolio/ANN")
reticulate::repl_python()
reticulate::repl_python()
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
reticulate::use_python("/Users/amirousanoussy/Application/anaconda3/bin/python", required = TRUE)
reticulate::py_config()
reticulate::repl_python()
knitr::opts_chunk$set(echo = TRUE)
setwd("~/amirousanoussy/repos/Portfolio/ANN")
setwd("~/repos/Portfolio/ANN")
knitr::opts_chunk$set(echo = TRUE)
setwd("~/repos/Portfolio/ANN")
library(reticulate)
reticulate::use_python("/Users/amirousanoussy/Application/anaconda3/bin/python", required = TRUE)
reticulate::py_config()
reticulate::repl_python()
